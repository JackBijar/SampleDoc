:												SPRING BOOT WITH FLYWAY												:
---------------------------------------------------------------------------------------------------------------------
:	What is Flyway ?																					:

=>	Flyway is an open source database migration tool. 
	It strongly favors simplicity and convention over configuration. 
	It is based around 7 basic commands: Migrate, Clean, Info, Validate, Undo, Baseline and Repair.
	
:	How to configure Flyway with Spring Boot ?															 :

=>	1) Add following Dependency in your class path :

		compile('org.flywaydb:flyway-core')
	
	2) Add following basic database Configuration in your application.properties file :	
	-----------------------------------------------------------------------------------------------
		spring.datasource.url = jdbc:mysql://localhost:3306/sb_flyway_db?useSSL=false
		spring.datasource.username = root
		spring.datasource.password = root
		spring.datasource.dbcp2.validation-query=SELECT 1
		spring.jpa.show-sql=true

		spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

		spring.jpa.hibernate.ddl-auto = validate
	----------------------------------------------------------------------------------------------
	
	3) Create a Folder db/migration in src/main/resources folder
	
	4) Now Create Database sql Configuration file in migration folder. File name as follows :
	
		V1__description.sql
		V2__desc_desc.sql
		
	5) File Contain Like : V1_init.sql
	-----------------------------------------------------------------------------------------------
		CREATE TABLE users (
		  id bigint(20) NOT NULL AUTO_INCREMENT,
		  username varchar(100) NOT NULL,
		  first_name varchar(50) NOT NULL,
		  last_name varchar(50) DEFAULT NULL,  
		  PRIMARY KEY (id),
		  UNIQUE KEY UK_username (username)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	-----------------------------------------------------------------------------------------------
		V2__insert_default_data.sql
	-----------------------------------------------------------------------------------------------
		INSERT INTO users(username, first_name, last_name) VALUES('callicoder', 'Rajeev', 'Singh');
		INSERT INTO users(username, first_name, last_name) VALUES('flywaytest', 'Flyway', 'Test');
	-----------------------------------------------------------------------------------------------
	
	6) Your SQL File Configuration and Model Class configuration must be same otherwise it through an error.
	
	User Model Class :
	-----------------------------------------------------------------------------------------------
		@Entity
		@Table(name = "users")
		public class User implements Serializable
		{
			private static final long serialVersionUID = 392192967021607371L;

			@Id
			@GeneratedValue(strategy = GenerationType.IDENTITY)
			private Long id;

			@NotBlank
			@Column(unique = true)
			@Size(min = 1, max = 100)
			private String username;

			@NotBlank
			@Size(max = 50)
			private String firstName;

			@Size(max = 50)
			private String lastName; 
			
			//setter() getter()
		}
	-----------------------------------------------------------------------------------------------
	
	7)	Now Run Your Application and show following output in console :
	
		o.f.core.internal.command.DbValidate     : Successfully validated 2 migrations (execution time 00:00.069s)
		o.f.core.internal.command.DbMigrate      : Current version of schema `sb_flyway_db`: 2
		o.f.core.internal.command.DbMigrate      : Schema `sb_flyway_db` is up to date. No migration necessary.
		
	
:	Flyway	Commands :

This commands are used in Flyway Gradle Projects NOT** Spring :

	flywayMigrate
	flywayInfo
	flywayValidate
	flywayClean
	flywayRepair
	flywayBaseline
	
Example : gradlew flywayMigrate

-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
:		JSON			:

JSON OBJECT TO JSON STRING => 

var obj = { "name":"John", "age":30, "city":"New York"};

JSON.stringify(obj);

JSON STRING TO JSON OBJECT =>


var obj = JSON.parse('{ "name":"John", "age":30, "city":"New York"}');

-----------------------------------------------------------------------------------------------